# This is a basic workflow to help you get started with Actions

name: CICD for Cloudhub 1.0

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Caches dependencies and build outputs to improve workflow execution time.
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/checkin-process-api/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'
          
      - uses: s4u/maven-settings-action@v2.6.0
        with:
          servers: |
            [{
                "id": "anypoint-exchange-v3",
                "username": "${{ secrets.ANYPOINT_USERNAME }}",
                "password": "${{ secrets.ANYPOINT_PASSWORD }}"
            },
            {
                "id": "cloudhub-deploy",
                "username": "${{ secrets.ANYPOINT_USERNAME }}",
                "password": "${{ secrets.ANYPOINT_PASSWORD }}"
            },
            {
                "id": "releases-ee",
                "username": "${{ secrets.RELEASES_USERNAME }}",
                "password": "${{ secrets.RELEASES_PASSWORD }}"
            }
            ]
          
      # maven build command, could add other flags if needed
      - name: Build
        run: mvn -B package --file checkin-process-api/pom.xml
        
      - name: Stamp artifact file name with commit hash
        run: |
          artifactName1=$(ls checkin-process-api/target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(ls checkin-process-api/target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
          mv $artifactName1 $artifactName2
          
      # save the produced jar file to be deployed later    
      - uses: actions/upload-artifact@v3
        with:
            name: artifacts
            path: checkin-process-api/target/*.jar
            
# Steps for executing the deployment against Cloudhub Anypoint Platform
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@v3
      with:
        name: artifacts

    - uses: s4u/maven-settings-action@v2.6.0
      with:
        servers: |
          [{
              "id": "anypoint-exchange-v3",
              "username": "${{ secrets.ANYPOINT_USERNAME }}",
              "password": "${{ secrets.ANYPOINT_PASSWORD }}"
          }]
    - name: Deploy to CloudHub
      env:
        AUTHOR: "Pruthvi Raj Krishnam"
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy -Dap.clientid=${{ secrets.AP_CLIENT_ID }} -Dap.clientsecret=${{ secrets.AP_CLIENT_SECRET }} -DbusinessGroupId="1160155d-6e79-4b1f-9400-5176d47f73b8" -Dencrypt.key="secure12345" -Denvironment="dev" -Dapi.id="18086606" -DapplicationName="checkin-api-26aug"  -Dclient_id=-"44696678d0a94991b301707962cebf5c" -Dclient_secret="fe8e850f2182494e8A6729f9E79550B6"
  
